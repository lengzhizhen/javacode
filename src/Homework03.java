import javafx.application.Application;
import javafx.stage.Stage;
import java.util.Scanner;

public class Homework03 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        /**
         * 标识符的命名规则：
         * 1.标识符可以使用26个大写字母和小写字母，0-9，_和$;
         * 2.不能以数字开头
         * 3.不能使用关键字和保留字但是可以包含关键字和保留字
         * 4.标识符严格区分大小写，没有长度限制
         * 5.标识符不能有空格
         */

        /**
         * 标识符的命名规范
         * 1.包名：多单词时所有字母都小写,比如aaa.bbb.ccc
         * 2.类名，接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz(大驼峰)，比如：TankShotGame
         * 3.变量名，方法名多单词组成时，第一个单词首字母小写，第二个单词开始首字母大写（小驼峰，简称驼峰法）
         * 比如：tankShotGame
         * 4.常量名：所有字母都大写，多单词每个单词用下划线连接：XXX_YYY_ZZZ
         * 比如：定义一个所得税率TAX_RATE
         */

    }
}

class Input{
    public static void main(String[] args){
        /**
         * 实现键盘输入接收的方法：
         * 1.引入Scanner所在的包
         * 2.用new创建一个Scanner对象
         * 3.接收用户输入使用相关的方法
         */
        Scanner scanner = new Scanner(System.in);
        System.out.println("请输入姓名:");
        String name = scanner.next();
        System.out.println("请输入年龄：");
        int age = scanner.nextInt();
        System.out.println("请输入薪水：");
        Double sal = scanner.nextDouble();
        System.out.println("个人信息如下：");
        System.out.println("姓名为："+name+"\n"+"年龄为："+age+"\n"+"薪水为："+sal);
    }
}

class BinaryText{
    public static void main(String[] args){
        //二进制：0,1z组成，满二进一，以0b或者0B开头
        int n1 = 0b1010;
        //十进制：0-9组成，满10进1
        int n2 = 1010;
        //八进制:0-7组成，满8进1，以数字0开头表示
        int n3 = 01010;
        //十六进制：0-9以及A(10)-F(15)组成，满16进1，以0x或者0X表示，此处的A-F不区分大小写
        int n4 = 0X10101;
        System.out.println("n1="+n1);
        System.out.println("n2="+n2);
        System.out.println("n3="+n3);
        System.out.println("n4="+n4);

        /**
         * 进制转换：
         * 一、2进制，8进制，16进制转换为10进制
         * 1.二进制转换为十进制(规则从最低位右边开始，将每个位上的数提取出来，乘以2的（位数减1）次方，然后求和)
         * 0b1011--->1*2的(1-1)次方+1*2的(2-1)次方+0*2的(3-1)次方+1*2的(4-1)次方=11
         * 2.八进制转十进制(规则从最低位右边开始，将每个位上的数提取出来，乘以8的（位数减1）次方，然后求和）
         * 0234=4*8^0+3*8^1+2*8^2+0*8^3=4+24+128=156
         * 3.十六进制转换成十进制(规则从最低位右边开始，将每个位上的数提取出来，乘以16的（位数减1）次方，然后求和）
         * 0x23A=10*16^0+3*16^1+2*16^2=10+48+512=570
         * 二、十进制转换成2进制，8进制，16进制（将该数不断除以2,8,16，直到商为0为止，然后把得到的余数倒过来，就是对应的2,8,16进制）
         *
         *
         *
         *
         * 补码，原码，反码：
         * 对于有符号的而言：
         * 1.二进制的最高位是符号位，0表示正数，1表示负数
         * 2.正数的原码。反码，补码一样（三码合一）
         * 3.负数的反码=它的原码符号位不变，其它位取反（0-->1,1-->0）
         * 4.负数的补码=它的反码+1，负数的反码=负数的补码-1
         * 5.0的反码，补码都是0
         * 6.java没有无符号数，换言之，java中的数都是有符号的
         * 7.在计算机运算的时候，都是以补码的方式运算的
         * 8.当我们看到运算结果的时候，要看它的原码
         *
         *
         * 按位与&：两位全为1，结果为1，否则为0
         * 按位或|：两位有一个为1，结果为1，否则为0
         * 按位异或^:两位一个为0，一个为1，结果为1，否则为0
         * 按位取反~：0-->,1-->0
         */


    }
}

class TernaryOperatorDetail{
    public static void main(String[] args){
        System.out.println(2&3);
        /**
         * 推导过程：
         * 1.先得到2的补码  2的补码 => 2的原码 00000000 00000000 00000000 00000010
         *    2的补码 00000000 00000000 00000000 00000010
         * 2.3的补码  3的补码 => 3的原码 00000000 00000000 00000000 00000011
         *   3的补码 00000000 00000000 00000000 00000011
         * 3.按位&
         * 2的补码：00000000 00000000 00000000 00000010
         * 3的补码：00000000 00000000 00000000 00000011
         * 按位&： 00000000 00000000 00000000 00000010
         * 运算后的原码补码一样转换成十进制为2
         */

        System.out.println(~-2);
        /**
         * 推导过程：
         * 1.先得到-2的原码 10000000 00000000 00000000 00000010
         * 2. -2的反码     11111111 11111111 11111111 11111101
         * 3.-2的补码      11111111 11111111 11111111 11111110
         * 4.~-2的操作     00000000 00000000 00000000 00000001
         * 5.运算后的原码   00000000 00000000 00000000 00000001
         * 6.结果为1
         */

        System.out.println(~2);
        /**
         * 推导过程：
         * 1.先得到2的补码码 00000000 00000000 00000000 00000010
         * 2.~2操作        11111111 11111111 11111111 11111101
         * 3.运算后的反码   11111111 11111111 11111111 11111100
         * 4.运算后的原码   10000000 00000000 00000000 00000011
         * 5.结果为：-3
         */
    }
}

class BitOperator{
    public static void main(String[] args){
        /**
         * 1.算术右移>>:低位溢出，符号位不变，并用符号位补溢出的高位
         * 2.算术左移<<：符号位不变，低位补0
         * 3.>>>逻辑右移也叫无符号右移，运算规则，低位溢出高位补0
         * 4.没有<<<
         */
        int a = 1 >> 2;//1/2/2=0
        /**
         * 推导：1 => 00000000 00000000 00000000 00000001
         * 右移后     00000000 00000000 00000000 00000000
         * 结果为0
         */
        int b = 1 << 2;//1*2*2=4
        /**
         * 推导：1 => 00000000 00000000 00000000 00000001
         * 左移后     00000000 00000000 00000000 00000100
         * 结果为4
         */
        System.out.println(a);
        System.out.println(b);
    }
}